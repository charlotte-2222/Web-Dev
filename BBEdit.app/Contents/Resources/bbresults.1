.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BBRESULTS 1"
.TH BBRESULTS 1 "Bare Bones Software, Inc." "01/04/2021" "Command Line Tools Reference"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
bbresults \- OMG PNOIES
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBbbresults\fR \fB\-hp0 \-\-(long_form_switches)\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBbbresults\fR turns formatted error output from Unix command-line tools
into BBEdit results windows. It will read from standard input only, and
is designed to be used as the terminal step in a pipeline.
.PP
BBEdit is a commercial text editor from Bare Bones Software.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-p\fR, \fB\-\-pattern\fR" 5
.IX Item "-p, --pattern"
This option determines how BBEdit parses each line in the input. If omitted,
a pattern will be used which interprets \*(L"generic\*(R" Unix output of the forms:
.Sp
file_name:line:column: message
file_name:line: message
.Sp
You may explicitly use \fB\-p default\fR or \fB\-\-pattern default\fR to specify
this behavior. Use \fBbbresults \-h\fR to list other available built-in
patterns.
.IP "\fB\-n\fR, \fB\-\-new\-window\fR" 5
.IX Item "-n, --new-window"
Normally, BBEdit will attempt to re-use a results window by figuring
out the common ancestor of all of the referenced files. If you would
prefer to create a new results window every time, use this option.
.IP "\fB\-h\fR, \fB\-\-help\fR" 5
.IX Item "-h, --help"
Prints a brief but informative help message, which includes a list of
built-in parsing patterns.
.IP "\fB\-0\fR (no long form)" 5
.IX Item "-0 (no long form)"
\&\fBbbresults\fR expects its input to consist of one error per line, with
each line separated by a newline (\s-1ASCII\s0 decimal 10) character. If the
source of the data separates errors using nulls (\s-1ASCII 0\s0), specify \fB\-0\fR
for correct results.
.SH "PARSING PATTERNS"
.IX Header "PARSING PATTERNS"
If you are using a tool that generates error output in a form not
supported by a built-in pattern, you may write your own BBEdit grep
pattern to parse the output. The pattern needs to make use of named
capture groups in order to match the following components of each
error:
.IP "\fBfile\fR" 5
.IX Item "file"
matches the name (or path) to the file in which the error was found.
.IP "\fBline\fR" 5
.IX Item "line"
matches the (one-based) line number on which the error occurred.
.IP "\fBcol\fR" 5
.IX Item "col"
matches the column (offset from start of line, one-based) at
which the error occurred. This capture group is optional, and if it is
omitted, BBEdit will select the entire line containing the error.
Otherwise, BBEdit will place the insertion point at the indicated column
position.
.IP "\fBmsg\fR" 5
.IX Item "msg"
matches the text that will be used as the text of the message in
the BBEdit results window.
.IP "\fBtype\fR" 5
.IX Item "type"
is optional, and must match a range of text which indicates
whether the result is a warning, error, or \*(L"other\*(R". If the text in the
capture range begins with a \*(L"w\*(R" or \*(L"W\*(R", BBEdit will list it as a
warning; if the text in the capture range begins with an \*(L"e\*(R" or \*(L"E\*(R",
BBEdit will list it as a warning. If the \fBtype\fR capture group is
absent, or matches something that does not begin with a \*(L"w\*(R" or an \*(L"e\*(R",
BBEdit will list it as a note.
.PP
Here is the \fBdefault\fR pattern, which matches optional columns but does not
attempt to differentiate between errors and warnings:
.Sp
.RS 5
(?P<file>.+?):(?P<line>\ed+):((?P<col>\ed+):)?\es+(?P<msg>.*)$
.RE
.PP
This will match lines of the form:
.Sp
.RS 5
/path/to/some/file:13:51: error message goes here
.RE
.PP
It will also match lines which lack a column number:
.Sp
.RS 5
/path/to/some/file:678: message here
.RE
.PP
The \fBflake8\fR built-in pattern builds on this by adding support for the
\&\*(L"Wnnn\*(R" and \*(L"Ennn\*(R" notation that flake8 uses in its messages:
.Sp
.RS 5
(?P<<file>.+?):(?P<line>\ed+):(?P<col>\ed+):\es+(?P<type>[\s-1WE\s0]\ed+)\es+(?P<msg>.*)$
.RE
.PP
The patterns for \fB\-p\fR/\fB\-\-pattern\fR follow the \s-1\fBPCRE\s0\fR\|(3) syntax discussed
in the \*(L"Searching with Grep\*(R" chapter of the BBEdit User Manual. Note
that the pattern will never see more than one line's worth of output
text, unless you separate error messages with nulls and use the \fB\-0\fR
option.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.IP "grep \-n void *.c | bbresults \-p grep" 5
.IX Item "grep -n void *.c | bbresults -p grep"
Using the built-in \fBgrep\fR\|(1), generates a results window with all occurrences of
the word \*(L"void\*(R" in all C source files in the current working directory.
.IP "flake8 foobar.py | bbresults \-p flake8" 5
.IX Item "flake8 foobar.py | bbresults -p flake8"
Assuming you have previously installed \fBflake8\fR, generates a results
window containing any errors or warnings found in \*(L"foobar.py\*(R".
.SH "BUGS"
.IX Header "BUGS"
\&\fBbbresults\fR will ignore any lines which don't match the parsing pattern,
even if those lines might contain useful supplemental data (for example,
useful diagnostics generated by \fBclang\fR\|(1)).
.PP
If the input is of nonzero length but contains no errors or warnings,
\&\fBbbresults\fR will bring BBEdit to the front but provide no other
indication.
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 3
\& Bare Bones Software, Inc.
\& Web site: https://www.barebones.com/
\& Email: support@barebones.com
.Ve
